// src/services/api.js
import { getCookie } from "../utils/cookies";
import toast from "react-hot-toast";
import { EXAMPLE_URL } from "../utils/url.js";

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç telegram_id –∏–∑ initData —Å—Ç—Ä–æ–∫–∏
 * @param {string} initData - —Å—Ç—Ä–æ–∫–∞ initData –æ—Ç Telegram
 * @returns {number|null} telegram_id –∏–ª–∏ null
 */
const extractTelegramIdFromInitData = (initData) => {
  try {
    if (!initData) return null;

    // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É initData
    const params = new URLSearchParams(initData);
    const userParam = params.get("user");

    if (userParam) {
      const userData = JSON.parse(decodeURIComponent(userParam));
      return userData?.id || null;
    }

    return null;
  } catch (error) {
    console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ telegram_id –∏–∑ initData:", error);
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç Telegram ID –∏–∑ Telegram WebApp
 * @returns {number|null} telegram_id –∏–ª–∏ null
 */
const getTelegramId = () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Telegram WebApp
    if (typeof window !== 'undefined' && window.Telegram && window.Telegram.WebApp) {
      const webApp = window.Telegram.WebApp;
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ initDataUnsafe
      if (webApp.initDataUnsafe && webApp.initDataUnsafe.user && webApp.initDataUnsafe.user.id) {
        console.log("üîç Found telegram_id in initDataUnsafe:", webApp.initDataUnsafe.user.id);
        return webApp.initDataUnsafe.user.id;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ initData
      if (webApp.initData) {
        const telegramId = extractTelegramIdFromInitData(webApp.initData);
        if (telegramId) {
          console.log("üîç Found telegram_id in initData:", telegramId);
          return telegramId;
        }
      }
    }
    
    console.warn("‚ö†Ô∏è No Telegram WebApp found or no user ID available");
    return null;
  } catch (error) {
    console.warn("‚ö†Ô∏è Error getting Telegram ID:", error);
    return null;
  }
};

const BASE_URL = EXAMPLE_URL;

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP-–∑–∞–ø—Ä–æ—Å
 */
const request = async (method, url, data = null, initDataToUse = null) => {
  try {
    const headers = {
      "Content-Type": "application/json",
    };

    // ‚úÖ –¥–æ–±–∞–≤–ª—è–µ–º initData –∏–ª–∏ token –∏–∑ cookies
    const initData = getCookie("initData");
    let initDataToUseFinal = initDataToUse || initData;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º access_token –∏–∑ localStorage
    const accessToken = localStorage.getItem('access_token');
    if (accessToken) {
      headers["Authorization"] = `Bearer ${accessToken}`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram
    if (!initDataToUseFinal) {
      const urlParams = new URLSearchParams(window.location.search);
      const tgWebAppData = urlParams.get('tgWebAppData');
      
      if (tgWebAppData) {
        initDataToUseFinal = tgWebAppData;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ initData —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –º–æ–∫
    if (initDataToUseFinal && initDataToUseFinal.includes('function()')) {
      console.warn("‚ö†Ô∏è Invalid initData detected, clearing it");
      initDataToUseFinal = null;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ /auth/login ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º Telegram –¥–∞–Ω–Ω—ã–µ
    if (method === "POST" && url === "/auth/login") {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID
      const telegramId = getTelegramId();
      
      if (telegramId) {
        headers["X-Telegram-User-ID"] = telegramId.toString();
        console.log("üîç Using real telegram_id:", telegramId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if (data) {
          data.telegram_id = telegramId;
        }
      } else {
        console.warn("‚ö†Ô∏è No Telegram ID available - request will fail if backend requires it");
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º initData –µ—Å–ª–∏ –µ—Å—Ç—å
      if (initDataToUseFinal) {
        headers["X-Telegram-Init-Data"] = initDataToUseFinal;
        headers["x-telegram-init-data"] = initDataToUseFinal;
        headers["telegram-init-data"] = initDataToUseFinal;
        
        if (data) {
          data.initData = initDataToUseFinal;
        }
      }
    } else if (initDataToUseFinal) {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      headers["x-init-data"] = initDataToUseFinal;
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞
    if (method === "POST" && url === "/auth/login") {
      console.log("üîç Login request headers:", headers);
      console.log("üîç Login request body:", data);
    }


    const options = {
      method,
      headers,
      // credentials: "include", // —É–±–∏—Ä–∞–µ–º –∏–∑-–∑–∞ CORS –ø—Ä–æ–±–ª–µ–º
    };

    if (data) options.body = JSON.stringify(data);

    const res = await fetch(`${BASE_URL}${url}`, options);

    const body = await res.json().catch(() => null);

    if (!res.ok) {
      const errMsg = body?.message || `Request failed: ${res.status}`;
      // ‚ùó –Ω–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (method !== "GET") toast.error(errMsg);
      return { body: null, err: errMsg };
    }

    return { body, err: null };
  } catch (err) {
    if (method !== "GET") toast.error("Network error");
    return { body: null, err };
  }
};

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram –¥–∞–Ω–Ω—ã—Ö
export const api = {
  get: (url) => request("GET", url),
  post: async (url, data, initData = null, telegramId = null) => {
    const BASE_URL = import.meta.env.VITE_API_URL || "https://dem-1-w8zo.onrender.com";

    const headers = {
      "Content-Type": "application/json",
    };

    if (initData) headers["X-Telegram-Init-Data"] = initData;
    if (telegramId) headers["X-Telegram-User-ID"] = telegramId.toString();

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å", { url, headers, data });

    const res = await fetch(`${BASE_URL}${url}`, {
      method: "POST",
      headers,
      body: JSON.stringify(data),
    });

    const text = await res.text();
    console.log("üì© –û—Ç–≤–µ—Ç:", text);
    return res.ok ? JSON.parse(text) : Promise.reject(text);
  },
  put: (url, data) => request("PUT", url, data),
  del: (url) => request("DELETE", url),
};

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π apiWrapper –¥–ª—è store:
export const apiWrapper = {
  get: (url) => api.get(url),
  post: (url, data) => api.post(url, data),
  put: (url, data) => api.put(url, data),
  del: (url) => api.del(url),
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default api;